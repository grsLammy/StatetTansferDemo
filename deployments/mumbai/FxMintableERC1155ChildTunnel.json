{
  "address": "0xF584670B5f14559056f891E056DF6c7C193bd3bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childTokenTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootTokenTemplate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "FxBatchDepositMintableERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "FxBatchWithdrawMintableERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FxDepositMintableERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FxWithdrawMintableERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        }
      ],
      "name": "TokenMapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_BATCH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_BATCH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childTokenTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "computedCreate2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_uniqueId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "deployChildToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rootToChildToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootTokenTemplateCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawToBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0656447e267481ceefe7e6d398feba9a8276dcfa984b9459f0528df9a0396166",
  "receipt": {
    "to": null,
    "from": "0xfDcDF3cFa272c67C17824FC792C9fF798C98eDed",
    "contractAddress": "0xF584670B5f14559056f891E056DF6c7C193bd3bF",
    "transactionIndex": 1,
    "gasUsed": "3224185",
    "logsBloom": "0x0000000000000000000000000000010100000000000000000080000000000000000000001000000000000000000000000000c000002000000000000000000000000000000000000000000000000000800001000000000000040100000000000000000000020000000000000000000800000000000000020080000000000000400000000000000000000000000000000000000000002000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xcfc1274ed76650a9a131105da7b544106d292cbd235898c3ab12d623b1e427d3",
    "transactionHash": "0x0656447e267481ceefe7e6d398feba9a8276dcfa984b9459f0528df9a0396166",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32629759,
        "transactionHash": "0x0656447e267481ceefe7e6d398feba9a8276dcfa984b9459f0528df9a0396166",
        "address": "0xF584670B5f14559056f891E056DF6c7C193bd3bF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fdcdf3cfa272c67c17824fc792c9ff798c98eded"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xcfc1274ed76650a9a131105da7b544106d292cbd235898c3ab12d623b1e427d3"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32629759,
        "transactionHash": "0x0656447e267481ceefe7e6d398feba9a8276dcfa984b9459f0528df9a0396166",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fdcdf3cfa272c67c17824fc792c9ff798c98eded",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000031ffde17ac95aa000000000000000000000000000000000000000000000000c40c12c9a35e69e9000000000000000000000000000000000000000000000e0ec7f92e93a928ffde000000000000000000000000000000000000000000000000c3da12eb8bb1d43f000000000000000000000000000000000000000000000e0ec82b2e71c0d59588",
        "logIndex": 2,
        "blockHash": "0xcfc1274ed76650a9a131105da7b544106d292cbd235898c3ab12d623b1e427d3"
      }
    ],
    "blockNumber": 32629759,
    "cumulativeGasUsed": "3258532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0xfeAfb79fb21AF628B4e30312e9C5361f171B410A",
    "0x83E45874538bEd57BAc3f60312699258634D551c"
  ],
  "numDeployments": 1,
  "solcInputHash": "80ba27825b01b3e6837ed09485351d01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childTokenTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootTokenTemplate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"FxBatchDepositMintableERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"FxBatchWithdrawMintableERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FxDepositMintableERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FxWithdrawMintableERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_BATCH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_BATCH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTokenTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computedCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_uniqueId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"deployChildToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rootToChildToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTokenTemplateCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawToBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol\":\"FxMintableERC1155ChildTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/mumbai/tokens/FxMintableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {ERC1155} from \\\"../../utils/lib/ERC1155.sol\\\";\\nimport {IFxMintableERC1155} from \\\"./IFxMintableERC1155.sol\\\";\\n\\ncontract FxMintableERC1155 is ERC1155, IFxMintableERC1155 {\\n    address internal _fxManager;\\n    address internal _connectedToken;\\n\\n    address public minter;\\n\\n    modifier onlyMinterOrFxManager() {\\n        require(msg.sender == minter || msg.sender == _fxManager, \\\"Invalid sender\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address fxManager_,\\n        address connectedToken_,\\n        string calldata uri_,\\n        address minter_\\n    ) public override {\\n        require(_fxManager == address(0x0) && _connectedToken == address(0x0), \\\"Token is already initialized\\\");\\n        _fxManager = fxManager_;\\n        _connectedToken = connectedToken_;\\n\\n        setupMetaData(uri_);\\n        minter = minter_;\\n    }\\n\\n    function fxManager() public view override returns (address) {\\n        return _fxManager;\\n    }\\n\\n    function connectedToken() public view override returns (address) {\\n        return _connectedToken;\\n    }\\n\\n    function setupMetaData(string memory _uri) public {\\n        require(msg.sender == _fxManager, \\\"Invalid sender\\\");\\n        _setupMetaData(_uri);\\n    }\\n\\n    function updateMinter(address who) external onlyMinterOrFxManager {\\n        minter = who;\\n    }\\n\\n    function mintToken(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyMinterOrFxManager {\\n        _mint(user, id, amount, data);\\n    }\\n\\n    function mintTokenBatch(\\n        address user,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyMinterOrFxManager {\\n        _mintBatch(user, ids, amounts, data);\\n    }\\n\\n    function burn(\\n        address user,\\n        uint256 id,\\n        uint256 amount\\n    ) public override {\\n        require(msg.sender == _fxManager, \\\"Invalid sender\\\");\\n        _burn(user, id, amount);\\n    }\\n\\n    function burnBatch(\\n        address user,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) public override {\\n        require(msg.sender == _fxManager, \\\"Invalid sender\\\");\\n        _burnBatch(user, ids, amounts);\\n    }\\n}\",\"keccak256\":\"0x073b9ca1353eab2835fdf77d623759a1dcdd44c7e4869f6e702d7da6dc156bff\",\"license\":\"MIT\"},\"src/mumbai/tokens/IFxMintableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"../../utils/lib/IERC1155.sol\\\";\\n\\ninterface IFxMintableERC1155 is IERC1155 {\\n    function fxManager() external returns (address);\\n\\n    function initialize(\\n        address fxManager,\\n        address connectedToken,\\n        string calldata uri,\\n        address minter\\n    ) external;\\n\\n    function connectedToken() external returns (address);\\n\\n    function mintToken(\\n        address user,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintTokenBatch(\\n        address user,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        address user,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatch(\\n        address user,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external;\\n}\",\"keccak256\":\"0x20ac6b951d7f8324b1099950307fb04478ccf48a9f2f4a3f04ae40679c763bcc\",\"license\":\"MIT\"},\"src/mumbai/tunnels/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x4e102fe11245e851e0f581b1fd4d5a3de2a86254a39e25d7ecc6d4a5947bcbd8\",\"license\":\"MIT\"},\"src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { FxMintableERC1155 } from \\\"../tokens/FxMintableERC1155.sol\\\";\\nimport { FxBaseChildTunnel } from \\\"./FxBaseChildTunnel.sol\\\";\\nimport { Ownable } from \\\"../../utils/lib/Ownable.sol\\\";\\nimport { Address } from \\\"../../utils/lib/Address.sol\\\";\\nimport { ERC1155Holder } from \\\"../../utils/lib/ERC1155Holder.sol\\\";\\nimport { Create2 } from \\\"../../utils/lib/Create2.sol\\\";\\n\\ncontract FxMintableERC1155ChildTunnel is FxBaseChildTunnel, Create2, ERC1155Holder, Ownable {\\n    bytes32 public constant DEPOSIT = keccak256(\\\"DEPOSIT\\\");\\n    bytes32 public constant DEPOSIT_BATCH = keccak256(\\\"DEPOSIT_BATCH\\\");\\n    bytes32 public constant WITHDRAW = keccak256(\\\"WITHDRAW\\\");\\n    bytes32 public constant WITHDRAW_BATCH = keccak256(\\\"WITHDRAW_BATCH\\\");\\n\\n    event TokenMapped(address indexed rootToken, address indexed childToken);\\n    event FxWithdrawMintableERC1155(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address indexed userAddress,\\n        uint256 id,\\n        uint256 amount\\n    );\\n    event FxDepositMintableERC1155(\\n        address indexed rootToken,\\n        address indexed depositor,\\n        address indexed userAddress,\\n        uint256 id,\\n        uint256 amount\\n    );\\n    event FxBatchWithdrawMintableERC1155(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address indexed userAddress,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n    event FxBatchDepositMintableERC1155(\\n        address indexed rootToken,\\n        address indexed depositor,\\n        address indexed userAddress,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n    // root to child token\\n    mapping(address => address) public rootToChildToken;\\n    // child token template\\n    address public immutable childTokenTemplate;\\n    // root token template codehash\\n    bytes32 public immutable rootTokenTemplateCodeHash;\\n\\n    constructor(\\n        address _fxChild,\\n        address _childTokenTemplate,\\n        address _rootTokenTemplate\\n    ) FxBaseChildTunnel(_fxChild) {\\n        require(\\n            Address.isContract(_childTokenTemplate),\\n            \\\"FxMintableERC1155ChildTunnel: Token template is not contract\\\"\\n        );\\n        childTokenTemplate = _childTokenTemplate;\\n        // compute root token template code hash\\n        rootTokenTemplateCodeHash = keccak256(minimalProxyCreationCode(_rootTokenTemplate));\\n    }\\n\\n    //\\n    // External methods\\n    //\\n\\n    // deploy child token with unique id\\n    function deployChildToken(bytes32 _uniqueId, string calldata _uri) external {\\n        // deploy new child token using unique id\\n        address childToken = createClone(keccak256(abi.encodePacked(_uniqueId)), childTokenTemplate); // child salt, childTokenTemplate\\n\\n        // compute root token address before deployment using create2\\n        address rootToken = computedCreate2Address(\\n            keccak256(abi.encodePacked(childToken)), // root salt\\n            rootTokenTemplateCodeHash,\\n            fxRootTunnel\\n        );\\n\\n        // check if mapping is already there\\n        require(rootToChildToken[rootToken] == address(0x0), \\\"FxMintableERC1155ChildTunnel: ALREADY_MAPPED\\\");\\n        rootToChildToken[rootToken] = childToken;\\n        emit TokenMapped(rootToken, childToken);\\n\\n        // initialize child token with all parameters\\n        FxMintableERC1155(childToken).initialize(address(this), rootToken, _uri, msg.sender);\\n    }\\n\\n    function withdraw(\\n        address childToken,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        _withdraw(childToken, msg.sender, id, amount, data);\\n    }\\n\\n    function withdrawTo(\\n        address childToken,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        _withdraw(childToken, receiver, id, amount, data);\\n    }\\n\\n    function withdrawBatch(\\n        address childToken,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        _withdrawBatch(childToken, msg.sender, ids, amounts, data);\\n    }\\n\\n    function withdrawToBatch(\\n        address childToken,\\n        address receiver,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        _withdrawBatch(childToken, receiver, ids, amounts, data);\\n    }\\n\\n    //\\n    // Internal methods\\n    //\\n\\n    function _processMessageFromRoot(\\n        uint256, /* stateId */\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        (bytes32 syncType, bytes memory syncData) = abi.decode(data, (bytes32, bytes));\\n\\n        if (syncType == DEPOSIT) {\\n            _syncDeposit(syncData);\\n        } else if (syncType == DEPOSIT_BATCH) {\\n            _syncDepositBatch(syncData);\\n        } else {\\n            revert(\\\"FxMintableERC1155ChildTunnel: INVALID_SYNC_TYPE\\\");\\n        }\\n    }\\n\\n    function _syncDeposit(bytes memory syncData) internal {\\n        (address rootToken, address depositor, address to, uint256 tokenId, uint256 amount, bytes memory data) = abi\\n            .decode(syncData, (address, address, address, uint256, uint256, bytes));\\n\\n        address childToken = rootToChildToken[rootToken];\\n        FxMintableERC1155 childTokenContract = FxMintableERC1155(childToken);\\n\\n        childTokenContract.mintToken(to, tokenId, amount, data);\\n        emit FxDepositMintableERC1155(rootToken, depositor, to, tokenId, amount);\\n    }\\n\\n    function _syncDepositBatch(bytes memory syncData) internal {\\n        (\\n            address rootToken,\\n            address depositor,\\n            address to,\\n            uint256[] memory tokenIds,\\n            uint256[] memory amounts,\\n            bytes memory data\\n        ) = abi.decode(syncData, (address, address, address, uint256[], uint256[], bytes));\\n\\n        address childToken = rootToChildToken[rootToken];\\n        FxMintableERC1155 childTokenContract = FxMintableERC1155(childToken);\\n\\n        childTokenContract.mintTokenBatch(to, tokenIds, amounts, data);\\n        emit FxBatchDepositMintableERC1155(rootToken, depositor, to, tokenIds, amounts);\\n    }\\n\\n    function _withdraw(\\n        address childToken,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal {\\n        FxMintableERC1155 childTokenContract = FxMintableERC1155(childToken);\\n        address rootToken = childTokenContract.connectedToken();\\n\\n        require(\\n            childToken != address(0x0) && rootToken != address(0x0) && childToken == rootToChildToken[rootToken],\\n            \\\"FxMintableERC1155ChildTunnel: NO_MAPPED_TOKEN\\\"\\n        );\\n\\n        childTokenContract.burn(msg.sender, id, amount);\\n        emit FxWithdrawMintableERC1155(rootToken, childToken, receiver, id, amount);\\n\\n        FxMintableERC1155 rootTokenContract = FxMintableERC1155(childToken);\\n        string memory metadata = rootTokenContract.uri(id);\\n\\n        _sendMessageToRoot(\\n            abi.encode(WITHDRAW, abi.encode(rootToken, childToken, receiver, id, amount, data, metadata))\\n        );\\n    }\\n\\n    function _withdrawBatch(\\n        address childToken,\\n        address receiver,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal {\\n        FxMintableERC1155 childTokenContract = FxMintableERC1155(childToken);\\n        address rootToken = childTokenContract.connectedToken();\\n\\n        require(\\n            childToken != address(0x0) && rootToken != address(0x0) && childToken == rootToChildToken[rootToken],\\n            \\\"FxMintableERC1155ChildTunnel: NO_MAPPED_TOKEN\\\"\\n        );\\n\\n        FxMintableERC1155 rootTokenContract = FxMintableERC1155(childToken);\\n        string memory metadata = rootTokenContract.uri(ids[0]);\\n\\n        childTokenContract.burnBatch(msg.sender, ids, amounts);\\n        emit FxBatchWithdrawMintableERC1155(rootToken, childToken, receiver, ids, amounts);\\n\\n        _sendMessageToRoot(\\n            abi.encode(WITHDRAW_BATCH, abi.encode(rootToken, childToken, receiver, ids, amounts, data, metadata))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x111d0e46e84eba1525e25323493558b8e937d219946952ee74e4b9b3e95dfe11\",\"license\":\"MIT\"},\"src/utils/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x528692af57588207a916a5de6b33ac1b66000d666d0d02415330a17a8c809888\",\"license\":\"MIT\"},\"src/utils/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"src/utils/lib/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Create2 adds common methods for minimal proxy with create2\\nabstract contract Create2 {\\n    // creates clone using minimal proxy\\n    function createClone(bytes32 _salt, address _target) internal returns (address _result) {\\n        bytes20 _targetBytes = bytes20(_target);\\n\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), _targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            _result := create2(0, clone, 0x37, _salt)\\n        }\\n\\n        require(_result != address(0), \\\"Create2: Failed on minimal deploy\\\");\\n    }\\n\\n    // get minimal proxy creation code\\n    function minimalProxyCreationCode(address logic) internal pure returns (bytes memory) {\\n        bytes10 creation = 0x3d602d80600a3d3981f3;\\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\\n        bytes20 targetBytes = bytes20(logic);\\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\\n    }\\n\\n    // get computed create2 address\\n    function computedCreate2Address(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) public pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xca48ee6afc3974a8da65da9c98f3263a2d4f8ba17dd47c56737bfe90b520cde5\",\"license\":\"MIT\"},\"src/utils/lib/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    function _setupMetaData(string memory uri_) internal virtual {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x2a38b0156675af877f88d1e7c9ee20f33d64a49c882369a8db9199f04a046bfd\",\"license\":\"MIT\"},\"src/utils/lib/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"src/utils/lib/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x90fb5bc288fb3dfc20f5bde15a36c211f3487af22d1654f0608077ca705c6339\",\"license\":\"MIT\"},\"src/utils/lib/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"src/utils/lib/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf88b24a5febce0a569cc5592de9ed75b8be677660ad51fbfa80b37270798e95f\",\"license\":\"MIT\"},\"src/utils/lib/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x98f51fcfa39b58ed90352217aa4900ec770f83a9fdec91780a45d61de4ad509e\",\"license\":\"MIT\"},\"src/utils/lib/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x37012a2803c5b59a18b826987198d7e72a2a558cdf426e2e21d44a5b89190115\",\"license\":\"MIT\"},\"src/utils/lib/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/utils/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf75c20cd6121b516c76444f61f5cb43131d3f652dffc3ef02ae8d26cd1503ba9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003d9038038062003d90833981810160405281019062000037919062000274565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600033905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506200013182620001d260201b62000eb31760201c565b62000173576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016a906200039e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050620001bb81620001e560201b60201c565b8051906020012060a0818152505050505062000515565b600080823b905060008111915050919050565b60606000693d602d80600a3d3981f360b01b9050600069363d3d373d3d3d363d7360b01b905060008460601b905060006e5af43d82803e903d91602b57fd5bf360881b90508383838360405160200162000243949392919062000348565b604051602081830303815290604052945050505050919050565b6000815190506200026e81620004fb565b92915050565b60008060006060848603121562000290576200028f620004a7565b5b6000620002a0868287016200025d565b9350506020620002b3868287016200025d565b9250506040620002c6868287016200025d565b9150509250925092565b620002e5620002df82620003e5565b62000489565b82525050565b62000300620002fa8262000411565b62000493565b82525050565b6200031b62000315826200043d565b6200049d565b82525050565b600062000330603c83620003c0565b91506200033d82620004ac565b604082019050919050565b6000620003568287620002d0565b600a82019150620003688286620002d0565b600a820191506200037a828562000306565b6014820191506200038c8284620002eb565b600f8201915081905095945050505050565b60006020820190508181036000830152620003b98162000321565b9050919050565b600082825260208201905092915050565b6000620003de8262000469565b9050919050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600080fd5b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a20546f60008201527f6b656e2074656d706c617465206973206e6f7420636f6e747261637400000000602082015250565b6200050681620003d1565b81146200051257600080fd5b50565b60805160601c60a0516138446200054c600039600081816105dc0152610be40152600081816105880152610c5001526138446000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806388837094116100c3578063b68ad1e41161007c578063b68ad1e414610352578063bc197c8114610370578063d81c8e52146103a0578063ea60c7c4146103be578063f23a6e61146103ee578063f2fde38b1461041e5761014d565b806388837094146102a25780638da5cb5b146102be5780639a7c4b71146102dc578063a3984fec146102f8578063b2edfcd214610316578063b324d3ed146103345761014d565b8063450d11f011610115578063450d11f0146101f45780634c958e23146102125780636e53e94d1461022e578063715018a61461024a5780637337957f146102545780637f1e9cb0146102845761014d565b806301ffc9a71461015257806303af05ab146101825780630bd0ca9a1461019e57806316ba7197146101ba578063266ceabb146101d8575b600080fd5b61016c600480360381019061016791906127d2565b61043a565b6040516101799190612fc9565b60405180910390f35b61019c60048036038101906101979190612296565b6104b4565b005b6101b860048036038101906101b3919061263b565b6104ce565b005b6101c26104e3565b6040516101cf9190612fe4565b60405180910390f35b6101f260048036038101906101ed9190612572565b610507565b005b6101fc610520565b6040516102099190612cb8565b60405180910390f35b61022c60048036038101906102279190612441565b610544565b005b61024860048036038101906102439190612772565b61055a565b005b610252610845565b005b61026e600480360381019061026991906126c3565b610996565b60405161027b9190612cb8565b60405180910390f35b61028c6109da565b6040516102999190612cb8565b60405180910390f35b6102bc60048036038101906102b791906120b2565b610a00565b005b6102c6610ad5565b6040516102d39190612cb8565b60405180910390f35b6102f660048036038101906102f19190612848565b610aff565b005b610300610be2565b60405161030d9190612fe4565b60405180910390f35b61031e610c06565b60405161032b9190612fe4565b60405180910390f35b61033c610c2a565b6040516103499190612fe4565b60405180910390f35b61035a610c4e565b6040516103679190612cb8565b60405180910390f35b61038a60048036038101906103859190612372565b610c72565b604051610397919061302f565b60405180910390f35b6103a8610c87565b6040516103b59190612fe4565b60405180910390f35b6103d860048036038101906103d391906120b2565b610cab565b6040516103e59190612cb8565b60405180910390f35b610408600480360381019061040391906124db565b610cde565b604051610415919061302f565b60405180910390f35b610438600480360381019061043391906120b2565b610cf3565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ad57506104ac82610ec6565b5b9050919050565b6104c48888888888888888610f30565b5050505050505050565b6104dc853386868686611325565b5050505050565b7f7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e98286981565b6105178733888888888888610f30565b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610552868686868686611325565b505050505050565b60006105ac846040516020016105709190612c9d565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006116f2565b90506000610623826040516020016105c49190612c34565b604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610996565b9050600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea906130ec565b60405180910390fd5b81600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e61760405160405180910390a38173ffffffffffffffffffffffffffffffffffffffff166309c26fb130838787336040518663ffffffff1660e01b815260040161080c959493929190612de3565b600060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc9061310c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060ff60f81b8386866040516020016109b49493929190612c4f565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a889061316c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b849061306c565b60405180910390fd5b610bdc848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506117ce565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7faf50c8eab81226bc79eee3a10e3fe25db1a2be7241130e392b0675df839b6d1881565b7f5fb452c5a8f2b7c7ef2984e2f1063c7ee9b80b110cdc98ccb98f6654e10b5ed281565b7f000000000000000000000000000000000000000000000000000000000000000081565b600063bc197c8160e01b905095945050505050565b7f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f82181565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600063f23a6e6160e01b905095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7a9061310c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea906130cc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600088905060008173ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb591906120df565b9050600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141580156110215750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156110b75750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b6110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed9061308c565b60405180910390fd5b60008a905060008173ffffffffffffffffffffffffffffffffffffffff16630e89341c8b8b600081811061112d5761112c61345b565b5b905060200201356040518263ffffffff1660e01b8152600401611150919061318c565b60006040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111a591906127ff565b90508373ffffffffffffffffffffffffffffffffffffffff16636b20c454338c8c8c8c6040518663ffffffff1660e01b81526004016111e8959493929190612e31565b600060405180830381600087803b15801561120257600080fd5b505af1158015611216573d6000803e3d6000fd5b505050508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff9d6ce913a8c25195bd04342ddf02feb6f90ec5e25cc176a79477fe03539100e8d8d8d8d6040516112949493929190612f57565b60405180910390a46113177f5fb452c5a8f2b7c7ef2984e2f1063c7ee9b80b110cdc98ccb98f6654e10b5ed2848e8e8e8e8e8e8e8e8b6040516020016112e39a99989796959493929190612cd3565b604051602081830303815290604052604051602001611303929190612fff565b60405160208183030381529060405261192a565b505050505050505050505050565b600086905060008173ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b815260040160206040518083038186803b15801561137257600080fd5b505afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa91906120df565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141580156114165750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156114ac5750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b6114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e29061308c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663f5298aca3388886040518463ffffffff1660e01b815260040161152893929190612ed4565b600060405180830381600087803b15801561154257600080fd5b505af1158015611556573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f6b6c02c8562a317842f2ed9df3f7c5c78b5e5bfc8f25c31d5f40a8f0abc4f57c89896040516115d09291906131a7565b60405180910390a4600088905060008173ffffffffffffffffffffffffffffffffffffffff16630e89341c896040518263ffffffff1660e01b8152600401611618919061318c565b60006040518083038186803b15801561163057600080fd5b505afa158015611644573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061166d91906127ff565b90506116e67f7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e982869848c8c8c8c8c8c896040516020016116b2989796959493929190612d64565b6040516020818303038152906040526040516020016116d2929190612fff565b60405160208183030381529060405261192a565b50505050505050505050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152846037826000f5925050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117be9061314c565b60405180910390fd5b5092915050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461185f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611856906130ac565b60405180910390fd5b600080838060200190518101906118769190612716565b915091507f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f8218214156118b0576118ab81611964565b611922565b7faf50c8eab81226bc79eee3a10e3fe25db1a2be7241130e392b0675df839b6d188214156118e6576118e181611af0565b611921565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189061312c565b60405180910390fd5b5b505050505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051611959919061304a565b60405180910390a150565b6000806000806000808680602001905181019061198191906121ed565b9550955095509550955095506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff16635e315f8b878787876040518563ffffffff1660e01b8152600401611a359493929190612f0b565b600060405180830381600087803b158015611a4f57600080fd5b505af1158015611a63573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fd8c1520fcddfeaf2a483cc53b571a2ff16d3fb642f7c64fa9ac200c7e3c9d4558888604051611add9291906131a7565b60405180910390a4505050505050505050565b60008060008060008086806020019051810190611b0d919061210c565b9550955095509550955095506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff166370a2754e878787876040518563ffffffff1660e01b8152600401611bc19493929190612e7a565b600060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f7c07f74676b1ec49513c6aabdf04347f2f22b6f2cd677f283d7291d3b89d05748888604051611c69929190612f92565b60405180910390a4505050505050505050565b6000611c8f611c8a846131f5565b6131d0565b90508083825260208201905082856020860282011115611cb257611cb16134c3565b5b60005b85811015611ce25781611cc88882612088565b845260208401935060208301925050600181019050611cb5565b5050509392505050565b6000611cff611cfa846131f5565b6131d0565b90508083825260208201905082856020860282011115611d2257611d216134c3565b5b60005b85811015611d525781611d38888261209d565b845260208401935060208301925050600181019050611d25565b5050509392505050565b6000611d6f611d6a84613221565b6131d0565b905082815260208101848484011115611d8b57611d8a6134c8565b5b611d968482856133b0565b509392505050565b6000611db1611dac84613221565b6131d0565b905082815260208101848484011115611dcd57611dcc6134c8565b5b611dd88482856133bf565b509392505050565b6000611df3611dee84613252565b6131d0565b905082815260208101848484011115611e0f57611e0e6134c8565b5b611e1a8482856133bf565b509392505050565b600081359050611e318161379b565b92915050565b600081519050611e468161379b565b92915050565b600081519050611e5b816137b2565b92915050565b60008083601f840112611e7757611e766134be565b5b8235905067ffffffffffffffff811115611e9457611e936134b9565b5b602083019150836020820283011115611eb057611eaf6134c3565b5b9250929050565b600082601f830112611ecc57611ecb6134be565b5b8135611edc848260208601611c7c565b91505092915050565b600082601f830112611efa57611ef96134be565b5b8151611f0a848260208601611cec565b91505092915050565b600081359050611f22816137c9565b92915050565b600081519050611f37816137c9565b92915050565b600081359050611f4c816137e0565b92915050565b60008083601f840112611f6857611f676134be565b5b8235905067ffffffffffffffff811115611f8557611f846134b9565b5b602083019150836001820283011115611fa157611fa06134c3565b5b9250929050565b600082601f830112611fbd57611fbc6134be565b5b8135611fcd848260208601611d5c565b91505092915050565b600082601f830112611feb57611fea6134be565b5b8151611ffb848260208601611d9e565b91505092915050565b60008083601f84011261201a576120196134be565b5b8235905067ffffffffffffffff811115612037576120366134b9565b5b602083019150836001820283011115612053576120526134c3565b5b9250929050565b600082601f83011261206f5761206e6134be565b5b815161207f848260208601611de0565b91505092915050565b600081359050612097816137f7565b92915050565b6000815190506120ac816137f7565b92915050565b6000602082840312156120c8576120c76134d7565b5b60006120d684828501611e22565b91505092915050565b6000602082840312156120f5576120f46134d7565b5b600061210384828501611e37565b91505092915050565b60008060008060008060c08789031215612129576121286134d7565b5b600061213789828a01611e4c565b965050602061214889828a01611e4c565b955050604061215989828a01611e4c565b945050606087015167ffffffffffffffff81111561217a576121796134cd565b5b61218689828a01611ee5565b935050608087015167ffffffffffffffff8111156121a7576121a66134cd565b5b6121b389828a01611ee5565b92505060a087015167ffffffffffffffff8111156121d4576121d36134cd565b5b6121e089828a01611fd6565b9150509295509295509295565b60008060008060008060c0878903121561220a576122096134d7565b5b600061221889828a01611e4c565b965050602061222989828a01611e4c565b955050604061223a89828a01611e4c565b945050606061224b89828a0161209d565b935050608061225c89828a0161209d565b92505060a087015167ffffffffffffffff81111561227d5761227c6134cd565b5b61228989828a01611fd6565b9150509295509295509295565b60008060008060008060008060a0898b0312156122b6576122b56134d7565b5b60006122c48b828c01611e22565b98505060206122d58b828c01611e22565b975050604089013567ffffffffffffffff8111156122f6576122f56134cd565b5b6123028b828c01611e61565b9650965050606089013567ffffffffffffffff811115612325576123246134cd565b5b6123318b828c01611e61565b9450945050608089013567ffffffffffffffff811115612354576123536134cd565b5b6123608b828c01611f52565b92509250509295985092959890939650565b600080600080600060a0868803121561238e5761238d6134d7565b5b600061239c88828901611e22565b95505060206123ad88828901611e22565b945050604086013567ffffffffffffffff8111156123ce576123cd6134cd565b5b6123da88828901611eb7565b935050606086013567ffffffffffffffff8111156123fb576123fa6134cd565b5b61240788828901611eb7565b925050608086013567ffffffffffffffff811115612428576124276134cd565b5b61243488828901611fa8565b9150509295509295909350565b60008060008060008060a0878903121561245e5761245d6134d7565b5b600061246c89828a01611e22565b965050602061247d89828a01611e22565b955050604061248e89828a01612088565b945050606061249f89828a01612088565b935050608087013567ffffffffffffffff8111156124c0576124bf6134cd565b5b6124cc89828a01611f52565b92509250509295509295509295565b600080600080600060a086880312156124f7576124f66134d7565b5b600061250588828901611e22565b955050602061251688828901611e22565b945050604061252788828901612088565b935050606061253888828901612088565b925050608086013567ffffffffffffffff811115612559576125586134cd565b5b61256588828901611fa8565b9150509295509295909350565b60008060008060008060006080888a031215612591576125906134d7565b5b600061259f8a828b01611e22565b975050602088013567ffffffffffffffff8111156125c0576125bf6134cd565b5b6125cc8a828b01611e61565b9650965050604088013567ffffffffffffffff8111156125ef576125ee6134cd565b5b6125fb8a828b01611e61565b9450945050606088013567ffffffffffffffff81111561261e5761261d6134cd565b5b61262a8a828b01611f52565b925092505092959891949750929550565b600080600080600060808688031215612657576126566134d7565b5b600061266588828901611e22565b955050602061267688828901612088565b945050604061268788828901612088565b935050606086013567ffffffffffffffff8111156126a8576126a76134cd565b5b6126b488828901611f52565b92509250509295509295909350565b6000806000606084860312156126dc576126db6134d7565b5b60006126ea86828701611f13565b93505060206126fb86828701611f13565b925050604061270c86828701611e22565b9150509250925092565b6000806040838503121561272d5761272c6134d7565b5b600061273b85828601611f28565b925050602083015167ffffffffffffffff81111561275c5761275b6134cd565b5b61276885828601611fd6565b9150509250929050565b60008060006040848603121561278b5761278a6134d7565b5b600061279986828701611f13565b935050602084013567ffffffffffffffff8111156127ba576127b96134cd565b5b6127c686828701612004565b92509250509250925092565b6000602082840312156127e8576127e76134d7565b5b60006127f684828501611f3d565b91505092915050565b600060208284031215612815576128146134d7565b5b600082015167ffffffffffffffff811115612833576128326134cd565b5b61283f8482850161205a565b91505092915050565b60008060008060608587031215612862576128616134d7565b5b600061287087828801612088565b945050602061288187828801611e22565b935050604085013567ffffffffffffffff8111156128a2576128a16134cd565b5b6128ae87828801611f52565b925092505092959194509250565b60006128c88383612c16565b60208301905092915050565b6128dd816132f4565b82525050565b6128f46128ef826132f4565b613423565b82525050565b600061290683856132c1565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612939576129386134d2565b5b60208302925061294a8385846133b0565b82840190509392505050565b600061296182613293565b61296b81856132c1565b935061297683613283565b8060005b838110156129a757815161298e88826128bc565b9750612999836132b4565b92505060018101905061297a565b5085935050505092915050565b6129bd81613318565b82525050565b6129d46129cf82613324565b613435565b82525050565b6129e381613350565b82525050565b6129fa6129f582613350565b61343f565b82525050565b612a098161335a565b82525050565b6000612a1b83856132d2565b9350612a288385846133b0565b612a31836134dc565b840190509392505050565b6000612a478261329e565b612a5181856132d2565b9350612a618185602086016133bf565b612a6a816134dc565b840191505092915050565b6000612a8183856132e3565b9350612a8e8385846133b0565b612a97836134dc565b840190509392505050565b6000612aad826132a9565b612ab781856132e3565b9350612ac78185602086016133bf565b612ad0816134dc565b840191505092915050565b6000612ae86021836132e3565b9150612af3826134fa565b604082019050919050565b6000612b0b602d836132e3565b9150612b1682613549565b604082019050919050565b6000612b2e602b836132e3565b9150612b3982613598565b604082019050919050565b6000612b516026836132e3565b9150612b5c826135e7565b604082019050919050565b6000612b74602c836132e3565b9150612b7f82613636565b604082019050919050565b6000612b976020836132e3565b9150612ba282613685565b602082019050919050565b6000612bba602f836132e3565b9150612bc5826136ae565b604082019050919050565b6000612bdd6021836132e3565b9150612be8826136fd565b604082019050919050565b6000612c00602a836132e3565b9150612c0b8261374c565b604082019050919050565b612c1f816133a6565b82525050565b612c2e816133a6565b82525050565b6000612c4082846128e3565b60148201915081905092915050565b6000612c5b82876129c3565b600182019150612c6b82866128e3565b601482019150612c7b82856129e9565b602082019150612c8b82846129e9565b60208201915081905095945050505050565b6000612ca982846129e9565b60208201915081905092915050565b6000602082019050612ccd60008301846128d4565b92915050565b600060e082019050612ce8600083018d6128d4565b612cf5602083018c6128d4565b612d02604083018b6128d4565b8181036060830152612d1581898b6128fa565b90508181036080830152612d2a8187896128fa565b905081810360a0830152612d3f818587612a0f565b905081810360c0830152612d538184612aa2565b90509b9a5050505050505050505050565b600060e082019050612d79600083018b6128d4565b612d86602083018a6128d4565b612d9360408301896128d4565b612da06060830188612c25565b612dad6080830187612c25565b81810360a0830152612dc0818587612a0f565b905081810360c0830152612dd48184612aa2565b90509998505050505050505050565b6000608082019050612df860008301886128d4565b612e0560208301876128d4565b8181036040830152612e18818587612a75565b9050612e2760608301846128d4565b9695505050505050565b6000606082019050612e4660008301886128d4565b8181036020830152612e598186886128fa565b90508181036040830152612e6e8184866128fa565b90509695505050505050565b6000608082019050612e8f60008301876128d4565b8181036020830152612ea18186612956565b90508181036040830152612eb58185612956565b90508181036060830152612ec98184612a3c565b905095945050505050565b6000606082019050612ee960008301866128d4565b612ef66020830185612c25565b612f036040830184612c25565b949350505050565b6000608082019050612f2060008301876128d4565b612f2d6020830186612c25565b612f3a6040830185612c25565b8181036060830152612f4c8184612a3c565b905095945050505050565b60006040820190508181036000830152612f728186886128fa565b90508181036020830152612f878184866128fa565b905095945050505050565b60006040820190508181036000830152612fac8185612956565b90508181036020830152612fc08184612956565b90509392505050565b6000602082019050612fde60008301846129b4565b92915050565b6000602082019050612ff960008301846129da565b92915050565b600060408201905061301460008301856129da565b81810360208301526130268184612a3c565b90509392505050565b60006020820190506130446000830184612a00565b92915050565b600060208201905081810360008301526130648184612a3c565b905092915050565b6000602082019050818103600083015261308581612adb565b9050919050565b600060208201905081810360008301526130a581612afe565b9050919050565b600060208201905081810360008301526130c581612b21565b9050919050565b600060208201905081810360008301526130e581612b44565b9050919050565b6000602082019050818103600083015261310581612b67565b9050919050565b6000602082019050818103600083015261312581612b8a565b9050919050565b6000602082019050818103600083015261314581612bad565b9050919050565b6000602082019050818103600083015261316581612bd0565b9050919050565b6000602082019050818103600083015261318581612bf3565b9050919050565b60006020820190506131a16000830184612c25565b92915050565b60006040820190506131bc6000830185612c25565b6131c96020830184612c25565b9392505050565b60006131da6131eb565b90506131e682826133f2565b919050565b6000604051905090565b600067ffffffffffffffff8211156132105761320f61348a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561323c5761323b61348a565b5b613245826134dc565b9050602081019050919050565b600067ffffffffffffffff82111561326d5761326c61348a565b5b613276826134dc565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006132ff82613386565b9050919050565b600061331182613386565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156133dd5780820151818401526020810190506133c2565b838111156133ec576000848401525b50505050565b6133fb826134dc565b810181811067ffffffffffffffff8211171561341a5761341961348a565b5b80604052505050565b600061342e82613449565b9050919050565b6000819050919050565b6000819050919050565b6000613454826134ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a204e4f60008201527f5f4d41505045445f544f4b454e00000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a20414c60008201527f52454144595f4d41505045440000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a20494e60008201527f56414c49445f53594e435f545950450000000000000000000000000000000000602082015250565b7f437265617465323a204661696c6564206f6e206d696e696d616c206465706c6f60008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6137a4816132f4565b81146137af57600080fd5b50565b6137bb81613306565b81146137c657600080fd5b50565b6137d281613350565b81146137dd57600080fd5b50565b6137e98161335a565b81146137f457600080fd5b50565b613800816133a6565b811461380b57600080fd5b5056fea2646970667358221220350236ba7eddda2addf713ddcc7bef3c6b545f4f5b739760b8c290a6bc5b2e9064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806388837094116100c3578063b68ad1e41161007c578063b68ad1e414610352578063bc197c8114610370578063d81c8e52146103a0578063ea60c7c4146103be578063f23a6e61146103ee578063f2fde38b1461041e5761014d565b806388837094146102a25780638da5cb5b146102be5780639a7c4b71146102dc578063a3984fec146102f8578063b2edfcd214610316578063b324d3ed146103345761014d565b8063450d11f011610115578063450d11f0146101f45780634c958e23146102125780636e53e94d1461022e578063715018a61461024a5780637337957f146102545780637f1e9cb0146102845761014d565b806301ffc9a71461015257806303af05ab146101825780630bd0ca9a1461019e57806316ba7197146101ba578063266ceabb146101d8575b600080fd5b61016c600480360381019061016791906127d2565b61043a565b6040516101799190612fc9565b60405180910390f35b61019c60048036038101906101979190612296565b6104b4565b005b6101b860048036038101906101b3919061263b565b6104ce565b005b6101c26104e3565b6040516101cf9190612fe4565b60405180910390f35b6101f260048036038101906101ed9190612572565b610507565b005b6101fc610520565b6040516102099190612cb8565b60405180910390f35b61022c60048036038101906102279190612441565b610544565b005b61024860048036038101906102439190612772565b61055a565b005b610252610845565b005b61026e600480360381019061026991906126c3565b610996565b60405161027b9190612cb8565b60405180910390f35b61028c6109da565b6040516102999190612cb8565b60405180910390f35b6102bc60048036038101906102b791906120b2565b610a00565b005b6102c6610ad5565b6040516102d39190612cb8565b60405180910390f35b6102f660048036038101906102f19190612848565b610aff565b005b610300610be2565b60405161030d9190612fe4565b60405180910390f35b61031e610c06565b60405161032b9190612fe4565b60405180910390f35b61033c610c2a565b6040516103499190612fe4565b60405180910390f35b61035a610c4e565b6040516103679190612cb8565b60405180910390f35b61038a60048036038101906103859190612372565b610c72565b604051610397919061302f565b60405180910390f35b6103a8610c87565b6040516103b59190612fe4565b60405180910390f35b6103d860048036038101906103d391906120b2565b610cab565b6040516103e59190612cb8565b60405180910390f35b610408600480360381019061040391906124db565b610cde565b604051610415919061302f565b60405180910390f35b610438600480360381019061043391906120b2565b610cf3565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ad57506104ac82610ec6565b5b9050919050565b6104c48888888888888888610f30565b5050505050505050565b6104dc853386868686611325565b5050505050565b7f7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e98286981565b6105178733888888888888610f30565b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610552868686868686611325565b505050505050565b60006105ac846040516020016105709190612c9d565b604051602081830303815290604052805190602001207f00000000000000000000000000000000000000000000000000000000000000006116f2565b90506000610623826040516020016105c49190612c34565b604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610996565b9050600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea906130ec565b60405180910390fd5b81600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e61760405160405180910390a38173ffffffffffffffffffffffffffffffffffffffff166309c26fb130838787336040518663ffffffff1660e01b815260040161080c959493929190612de3565b600060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc9061310c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060ff60f81b8386866040516020016109b49493929190612c4f565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a889061316c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b849061306c565b60405180910390fd5b610bdc848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506117ce565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7faf50c8eab81226bc79eee3a10e3fe25db1a2be7241130e392b0675df839b6d1881565b7f5fb452c5a8f2b7c7ef2984e2f1063c7ee9b80b110cdc98ccb98f6654e10b5ed281565b7f000000000000000000000000000000000000000000000000000000000000000081565b600063bc197c8160e01b905095945050505050565b7f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f82181565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600063f23a6e6160e01b905095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7a9061310c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea906130cc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600088905060008173ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb591906120df565b9050600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141580156110215750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156110b75750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16145b6110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed9061308c565b60405180910390fd5b60008a905060008173ffffffffffffffffffffffffffffffffffffffff16630e89341c8b8b600081811061112d5761112c61345b565b5b905060200201356040518263ffffffff1660e01b8152600401611150919061318c565b60006040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111a591906127ff565b90508373ffffffffffffffffffffffffffffffffffffffff16636b20c454338c8c8c8c6040518663ffffffff1660e01b81526004016111e8959493929190612e31565b600060405180830381600087803b15801561120257600080fd5b505af1158015611216573d6000803e3d6000fd5b505050508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff9d6ce913a8c25195bd04342ddf02feb6f90ec5e25cc176a79477fe03539100e8d8d8d8d6040516112949493929190612f57565b60405180910390a46113177f5fb452c5a8f2b7c7ef2984e2f1063c7ee9b80b110cdc98ccb98f6654e10b5ed2848e8e8e8e8e8e8e8e8b6040516020016112e39a99989796959493929190612cd3565b604051602081830303815290604052604051602001611303929190612fff565b60405160208183030381529060405261192a565b505050505050505050505050565b600086905060008173ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b815260040160206040518083038186803b15801561137257600080fd5b505afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa91906120df565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141580156114165750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156114ac5750600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b6114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e29061308c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663f5298aca3388886040518463ffffffff1660e01b815260040161152893929190612ed4565b600060405180830381600087803b15801561154257600080fd5b505af1158015611556573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f6b6c02c8562a317842f2ed9df3f7c5c78b5e5bfc8f25c31d5f40a8f0abc4f57c89896040516115d09291906131a7565b60405180910390a4600088905060008173ffffffffffffffffffffffffffffffffffffffff16630e89341c896040518263ffffffff1660e01b8152600401611618919061318c565b60006040518083038186803b15801561163057600080fd5b505afa158015611644573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061166d91906127ff565b90506116e67f7a8dc26796a1e50e6e190b70259f58f6a4edd5b22280ceecc82b687b8e982869848c8c8c8c8c8c896040516020016116b2989796959493929190612d64565b6040516020818303038152906040526040516020016116d2929190612fff565b60405160208183030381529060405261192a565b50505050505050505050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152846037826000f5925050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117be9061314c565b60405180910390fd5b5092915050565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461185f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611856906130ac565b60405180910390fd5b600080838060200190518101906118769190612716565b915091507f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f8218214156118b0576118ab81611964565b611922565b7faf50c8eab81226bc79eee3a10e3fe25db1a2be7241130e392b0675df839b6d188214156118e6576118e181611af0565b611921565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189061312c565b60405180910390fd5b5b505050505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051611959919061304a565b60405180910390a150565b6000806000806000808680602001905181019061198191906121ed565b9550955095509550955095506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff16635e315f8b878787876040518563ffffffff1660e01b8152600401611a359493929190612f0b565b600060405180830381600087803b158015611a4f57600080fd5b505af1158015611a63573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fd8c1520fcddfeaf2a483cc53b571a2ff16d3fb642f7c64fa9ac200c7e3c9d4558888604051611add9291906131a7565b60405180910390a4505050505050505050565b60008060008060008086806020019051810190611b0d919061210c565b9550955095509550955095506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff166370a2754e878787876040518563ffffffff1660e01b8152600401611bc19493929190612e7a565b600060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f7c07f74676b1ec49513c6aabdf04347f2f22b6f2cd677f283d7291d3b89d05748888604051611c69929190612f92565b60405180910390a4505050505050505050565b6000611c8f611c8a846131f5565b6131d0565b90508083825260208201905082856020860282011115611cb257611cb16134c3565b5b60005b85811015611ce25781611cc88882612088565b845260208401935060208301925050600181019050611cb5565b5050509392505050565b6000611cff611cfa846131f5565b6131d0565b90508083825260208201905082856020860282011115611d2257611d216134c3565b5b60005b85811015611d525781611d38888261209d565b845260208401935060208301925050600181019050611d25565b5050509392505050565b6000611d6f611d6a84613221565b6131d0565b905082815260208101848484011115611d8b57611d8a6134c8565b5b611d968482856133b0565b509392505050565b6000611db1611dac84613221565b6131d0565b905082815260208101848484011115611dcd57611dcc6134c8565b5b611dd88482856133bf565b509392505050565b6000611df3611dee84613252565b6131d0565b905082815260208101848484011115611e0f57611e0e6134c8565b5b611e1a8482856133bf565b509392505050565b600081359050611e318161379b565b92915050565b600081519050611e468161379b565b92915050565b600081519050611e5b816137b2565b92915050565b60008083601f840112611e7757611e766134be565b5b8235905067ffffffffffffffff811115611e9457611e936134b9565b5b602083019150836020820283011115611eb057611eaf6134c3565b5b9250929050565b600082601f830112611ecc57611ecb6134be565b5b8135611edc848260208601611c7c565b91505092915050565b600082601f830112611efa57611ef96134be565b5b8151611f0a848260208601611cec565b91505092915050565b600081359050611f22816137c9565b92915050565b600081519050611f37816137c9565b92915050565b600081359050611f4c816137e0565b92915050565b60008083601f840112611f6857611f676134be565b5b8235905067ffffffffffffffff811115611f8557611f846134b9565b5b602083019150836001820283011115611fa157611fa06134c3565b5b9250929050565b600082601f830112611fbd57611fbc6134be565b5b8135611fcd848260208601611d5c565b91505092915050565b600082601f830112611feb57611fea6134be565b5b8151611ffb848260208601611d9e565b91505092915050565b60008083601f84011261201a576120196134be565b5b8235905067ffffffffffffffff811115612037576120366134b9565b5b602083019150836001820283011115612053576120526134c3565b5b9250929050565b600082601f83011261206f5761206e6134be565b5b815161207f848260208601611de0565b91505092915050565b600081359050612097816137f7565b92915050565b6000815190506120ac816137f7565b92915050565b6000602082840312156120c8576120c76134d7565b5b60006120d684828501611e22565b91505092915050565b6000602082840312156120f5576120f46134d7565b5b600061210384828501611e37565b91505092915050565b60008060008060008060c08789031215612129576121286134d7565b5b600061213789828a01611e4c565b965050602061214889828a01611e4c565b955050604061215989828a01611e4c565b945050606087015167ffffffffffffffff81111561217a576121796134cd565b5b61218689828a01611ee5565b935050608087015167ffffffffffffffff8111156121a7576121a66134cd565b5b6121b389828a01611ee5565b92505060a087015167ffffffffffffffff8111156121d4576121d36134cd565b5b6121e089828a01611fd6565b9150509295509295509295565b60008060008060008060c0878903121561220a576122096134d7565b5b600061221889828a01611e4c565b965050602061222989828a01611e4c565b955050604061223a89828a01611e4c565b945050606061224b89828a0161209d565b935050608061225c89828a0161209d565b92505060a087015167ffffffffffffffff81111561227d5761227c6134cd565b5b61228989828a01611fd6565b9150509295509295509295565b60008060008060008060008060a0898b0312156122b6576122b56134d7565b5b60006122c48b828c01611e22565b98505060206122d58b828c01611e22565b975050604089013567ffffffffffffffff8111156122f6576122f56134cd565b5b6123028b828c01611e61565b9650965050606089013567ffffffffffffffff811115612325576123246134cd565b5b6123318b828c01611e61565b9450945050608089013567ffffffffffffffff811115612354576123536134cd565b5b6123608b828c01611f52565b92509250509295985092959890939650565b600080600080600060a0868803121561238e5761238d6134d7565b5b600061239c88828901611e22565b95505060206123ad88828901611e22565b945050604086013567ffffffffffffffff8111156123ce576123cd6134cd565b5b6123da88828901611eb7565b935050606086013567ffffffffffffffff8111156123fb576123fa6134cd565b5b61240788828901611eb7565b925050608086013567ffffffffffffffff811115612428576124276134cd565b5b61243488828901611fa8565b9150509295509295909350565b60008060008060008060a0878903121561245e5761245d6134d7565b5b600061246c89828a01611e22565b965050602061247d89828a01611e22565b955050604061248e89828a01612088565b945050606061249f89828a01612088565b935050608087013567ffffffffffffffff8111156124c0576124bf6134cd565b5b6124cc89828a01611f52565b92509250509295509295509295565b600080600080600060a086880312156124f7576124f66134d7565b5b600061250588828901611e22565b955050602061251688828901611e22565b945050604061252788828901612088565b935050606061253888828901612088565b925050608086013567ffffffffffffffff811115612559576125586134cd565b5b61256588828901611fa8565b9150509295509295909350565b60008060008060008060006080888a031215612591576125906134d7565b5b600061259f8a828b01611e22565b975050602088013567ffffffffffffffff8111156125c0576125bf6134cd565b5b6125cc8a828b01611e61565b9650965050604088013567ffffffffffffffff8111156125ef576125ee6134cd565b5b6125fb8a828b01611e61565b9450945050606088013567ffffffffffffffff81111561261e5761261d6134cd565b5b61262a8a828b01611f52565b925092505092959891949750929550565b600080600080600060808688031215612657576126566134d7565b5b600061266588828901611e22565b955050602061267688828901612088565b945050604061268788828901612088565b935050606086013567ffffffffffffffff8111156126a8576126a76134cd565b5b6126b488828901611f52565b92509250509295509295909350565b6000806000606084860312156126dc576126db6134d7565b5b60006126ea86828701611f13565b93505060206126fb86828701611f13565b925050604061270c86828701611e22565b9150509250925092565b6000806040838503121561272d5761272c6134d7565b5b600061273b85828601611f28565b925050602083015167ffffffffffffffff81111561275c5761275b6134cd565b5b61276885828601611fd6565b9150509250929050565b60008060006040848603121561278b5761278a6134d7565b5b600061279986828701611f13565b935050602084013567ffffffffffffffff8111156127ba576127b96134cd565b5b6127c686828701612004565b92509250509250925092565b6000602082840312156127e8576127e76134d7565b5b60006127f684828501611f3d565b91505092915050565b600060208284031215612815576128146134d7565b5b600082015167ffffffffffffffff811115612833576128326134cd565b5b61283f8482850161205a565b91505092915050565b60008060008060608587031215612862576128616134d7565b5b600061287087828801612088565b945050602061288187828801611e22565b935050604085013567ffffffffffffffff8111156128a2576128a16134cd565b5b6128ae87828801611f52565b925092505092959194509250565b60006128c88383612c16565b60208301905092915050565b6128dd816132f4565b82525050565b6128f46128ef826132f4565b613423565b82525050565b600061290683856132c1565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612939576129386134d2565b5b60208302925061294a8385846133b0565b82840190509392505050565b600061296182613293565b61296b81856132c1565b935061297683613283565b8060005b838110156129a757815161298e88826128bc565b9750612999836132b4565b92505060018101905061297a565b5085935050505092915050565b6129bd81613318565b82525050565b6129d46129cf82613324565b613435565b82525050565b6129e381613350565b82525050565b6129fa6129f582613350565b61343f565b82525050565b612a098161335a565b82525050565b6000612a1b83856132d2565b9350612a288385846133b0565b612a31836134dc565b840190509392505050565b6000612a478261329e565b612a5181856132d2565b9350612a618185602086016133bf565b612a6a816134dc565b840191505092915050565b6000612a8183856132e3565b9350612a8e8385846133b0565b612a97836134dc565b840190509392505050565b6000612aad826132a9565b612ab781856132e3565b9350612ac78185602086016133bf565b612ad0816134dc565b840191505092915050565b6000612ae86021836132e3565b9150612af3826134fa565b604082019050919050565b6000612b0b602d836132e3565b9150612b1682613549565b604082019050919050565b6000612b2e602b836132e3565b9150612b3982613598565b604082019050919050565b6000612b516026836132e3565b9150612b5c826135e7565b604082019050919050565b6000612b74602c836132e3565b9150612b7f82613636565b604082019050919050565b6000612b976020836132e3565b9150612ba282613685565b602082019050919050565b6000612bba602f836132e3565b9150612bc5826136ae565b604082019050919050565b6000612bdd6021836132e3565b9150612be8826136fd565b604082019050919050565b6000612c00602a836132e3565b9150612c0b8261374c565b604082019050919050565b612c1f816133a6565b82525050565b612c2e816133a6565b82525050565b6000612c4082846128e3565b60148201915081905092915050565b6000612c5b82876129c3565b600182019150612c6b82866128e3565b601482019150612c7b82856129e9565b602082019150612c8b82846129e9565b60208201915081905095945050505050565b6000612ca982846129e9565b60208201915081905092915050565b6000602082019050612ccd60008301846128d4565b92915050565b600060e082019050612ce8600083018d6128d4565b612cf5602083018c6128d4565b612d02604083018b6128d4565b8181036060830152612d1581898b6128fa565b90508181036080830152612d2a8187896128fa565b905081810360a0830152612d3f818587612a0f565b905081810360c0830152612d538184612aa2565b90509b9a5050505050505050505050565b600060e082019050612d79600083018b6128d4565b612d86602083018a6128d4565b612d9360408301896128d4565b612da06060830188612c25565b612dad6080830187612c25565b81810360a0830152612dc0818587612a0f565b905081810360c0830152612dd48184612aa2565b90509998505050505050505050565b6000608082019050612df860008301886128d4565b612e0560208301876128d4565b8181036040830152612e18818587612a75565b9050612e2760608301846128d4565b9695505050505050565b6000606082019050612e4660008301886128d4565b8181036020830152612e598186886128fa565b90508181036040830152612e6e8184866128fa565b90509695505050505050565b6000608082019050612e8f60008301876128d4565b8181036020830152612ea18186612956565b90508181036040830152612eb58185612956565b90508181036060830152612ec98184612a3c565b905095945050505050565b6000606082019050612ee960008301866128d4565b612ef66020830185612c25565b612f036040830184612c25565b949350505050565b6000608082019050612f2060008301876128d4565b612f2d6020830186612c25565b612f3a6040830185612c25565b8181036060830152612f4c8184612a3c565b905095945050505050565b60006040820190508181036000830152612f728186886128fa565b90508181036020830152612f878184866128fa565b905095945050505050565b60006040820190508181036000830152612fac8185612956565b90508181036020830152612fc08184612956565b90509392505050565b6000602082019050612fde60008301846129b4565b92915050565b6000602082019050612ff960008301846129da565b92915050565b600060408201905061301460008301856129da565b81810360208301526130268184612a3c565b90509392505050565b60006020820190506130446000830184612a00565b92915050565b600060208201905081810360008301526130648184612a3c565b905092915050565b6000602082019050818103600083015261308581612adb565b9050919050565b600060208201905081810360008301526130a581612afe565b9050919050565b600060208201905081810360008301526130c581612b21565b9050919050565b600060208201905081810360008301526130e581612b44565b9050919050565b6000602082019050818103600083015261310581612b67565b9050919050565b6000602082019050818103600083015261312581612b8a565b9050919050565b6000602082019050818103600083015261314581612bad565b9050919050565b6000602082019050818103600083015261316581612bd0565b9050919050565b6000602082019050818103600083015261318581612bf3565b9050919050565b60006020820190506131a16000830184612c25565b92915050565b60006040820190506131bc6000830185612c25565b6131c96020830184612c25565b9392505050565b60006131da6131eb565b90506131e682826133f2565b919050565b6000604051905090565b600067ffffffffffffffff8211156132105761320f61348a565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561323c5761323b61348a565b5b613245826134dc565b9050602081019050919050565b600067ffffffffffffffff82111561326d5761326c61348a565b5b613276826134dc565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006132ff82613386565b9050919050565b600061331182613386565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156133dd5780820151818401526020810190506133c2565b838111156133ec576000848401525b50505050565b6133fb826134dc565b810181811067ffffffffffffffff8211171561341a5761341961348a565b5b80604052505050565b600061342e82613449565b9050919050565b6000819050919050565b6000819050919050565b6000613454826134ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a204e4f60008201527f5f4d41505045445f544f4b454e00000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a20414c60008201527f52454144595f4d41505045440000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f46784d696e7461626c65455243313135354368696c6454756e6e656c3a20494e60008201527f56414c49445f53594e435f545950450000000000000000000000000000000000602082015250565b7f437265617465323a204661696c6564206f6e206d696e696d616c206465706c6f60008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6137a4816132f4565b81146137af57600080fd5b50565b6137bb81613306565b81146137c657600080fd5b50565b6137d281613350565b81146137dd57600080fd5b50565b6137e98161335a565b81146137f457600080fd5b50565b613800816133a6565b811461380b57600080fd5b5056fea2646970667358221220350236ba7eddda2addf713ddcc7bef3c6b545f4f5b739760b8c290a6bc5b2e9064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4489,
        "contract": "src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol:FxMintableERC1155ChildTunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4491,
        "contract": "src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol:FxMintableERC1155ChildTunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11616,
        "contract": "src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol:FxMintableERC1155ChildTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6120,
        "contract": "src/mumbai/tunnels/FxMintableERC1155ChildTunnel.sol:FxMintableERC1155ChildTunnel",
        "label": "rootToChildToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}